<html>
  <head>
    <img src="WebBanner2023.png" alt="Banner" width="900" height="300">
      <h1><b>ENG0018 Computer Laboratory 2025/26</b></h1>
      <h2>URN 6931085</h2>
    <hr>
    
      <h2 style="font-family:calibri;"><b>Conference paper: How to Increase Air Flow in Cities</b></h2>
    <hr>


    
    <!style for tables>
    <style>
      table{
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 30%

      }
      
      td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
      }
      
      tr:nth-child(even) {
        background-color: #dddddd;
      }

      </style>
      
  <!table of contents>
  <!table is built up like tr th /th th /th /tr>
  
  <style>
  	table {
    margin-left: 50px;
    }
   </style>
  
    <table>
    <tr>
    	<th><h3>Table of contents</h3></th>
    </tr>
    <tr>
     	<td><a href="#Abstract">Abstract</td>
    </tr>
    <tr>
    	<td><a href="#Introduction">Introduction</td>
    </tr>
    <tr>
    	<td><a href="#Analysis and discussion">Analysis and discussion</td>
    </tr>
    <tr>
    	<td><a href="#References">References</td>
    </tr>
    </table>
    
    <!TEXT>
    
    <h3 id="Abstract">Abstract</h3>
    <p class="ex1">
    <pre>
      Abstract Text
    </pre>
    </p>
    <hr>

    <h3 id="Introduction">Introduction</h3>
    <p class="ex1">
    <pre>
    <h id="Introduction_InText">
    	The layout and structure of cities has a significant impact on the air quality inside the city
        (<a href="https://libkey.io/libraries/2269/articles/443818582/full-text-file?utm_source=api_1143&allow_speedbump=true">Liye Zhu. et al (2021).</a>), smog is a more visual example of how urban areas influence air quality
        <a href="https://www.clarity.io/blog/a-deep-dive-on-smog">Fiona Green (2025).</a>. Tall buildings (especially in series) diverge the air around them in a way that
        creates a partial vacuum on the back face, this partial vacuum creates little to no air flow between
        buildings so 
      </h>
    </pre>
    </p>

    <h3 id="Analysis and discussion">Analysis and discussion</h3>
    <p class="ex1">
    <pre>
    <h id="Analysis_InText">
    	Ananysis & Discussion Text
    </h>
    </pre>
    </p>
    
    <style>
      p.ex1 {
      margin-left: 250px;
      }
    </style>
  </head>
  

    <!alphabetical by surname>
    <!(if no date)>
    <!multiple authors. et al>
    
    <h3 id="References">References</h3>
    <p>
    <pre>
    <a href="https://libkey.io/libraries/2269/articles/201255841/full-text-file?utm_source=api_1143&allow_speedbump=true">Dan Mei. el al (2018).</a>
    <a href="https://libkey.io/libraries/2269/articles/443818582/full-text-file?utm_source=api_1143&allow_speedbump=true">Liye Zhu. et al (2021).</a>
    <a href="https://www.clarity.io/blog/a-deep-dive-on-smog">Fiona Green (2025).</a>
    <a href=""> ().</a>
    </pre>
    </p>
    
  <body>
    <!What's this for?>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <style>
      .mySlides {display:none;}
    </style>

   <!-- //////////////////////////////////////////////////////////////////////////////// -->
  <!-- /////////////////////////////// Adding last update /////////////////////////////// -->
   <!-- //////////////////////////////////////////////////////////////////////////////// -->
  <hr>
<div id="last-updated">Loading last update time...</div>
<button onclick="verifyLastUpdatedTime()" style="display: block; margin: 10px auto; padding: 8px 16px;">
    Verify Last Modified Time
</button>
<script>
    async function getLastUpdatedTime() {
        const username = 'FEPSFY6931086';
        const repo = 'FY6931086';
       
        const url = `https://api.github.com/repos/${username}/${repo}/commits`;
        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/vnd.github.v3+json',
                }
            });
            if (!response.ok) {
                throw new Error(`Error fetching data: ${response.status} - ${response.statusText}`);
            }
            const commits = await response.json();
            if (commits && commits.length > 0) {
                const lastCommitDate = new Date(commits[0].commit.committer.date);
               
                document.getElementById('last-updated').innerText = `Last Modified Time: ${lastCommitDate.toLocaleString()}`;
            } else {
                document.getElementById('last-updated').innerText = 'No commits found in the repository.';
            }
        } catch (error) {
            console.error('Error fetching the last updated time:', error);
            document.getElementById('last-updated').innerText = 'Error fetching update time. Please check the repository details.';
        }
    }
    async function verifyLastUpdatedTime() {
        document.getElementById('last-updated').innerText = 'Verifying...';
        await getLastUpdatedTime();
        alert("Last modified time has been successfully verified from GitHub API.");
    }
    window.onload = getLastUpdatedTime;
</script>


   <!-- //////////////////////////////////////////////////////////////////////////////// -->
  <!-- /////////////////////////////// Word count function ////////////////////////////// -->
   <!-- //////////////////////////////////////////////////////////////////////////////// -->
<hr>
<p id="totalWordCount"></p>
<script>
  function displayWordCount(sectionId, outputId) {
    const text = document.getElementById(sectionId).textContent;
    const wordArray = text.trim().split(/\s+/);
    const wordCount = wordArray.length;
    return wordCount;
  }

  function displayTotalWordCount() {
    const IntroductionCount = displayWordCount("Introduction_InText");
    const AnalysisCount = displayWordCount("Analysis_InText");
    const totalWordCount = IntroductionCount + AnalysisCount;
    document.getElementById("totalWordCount").innerText = `Introduction and Analysis word count: ${totalWordCount}`;
  }
  window.onload = displayTotalWordCount;
</script>

<hr>
  </body>
</html>
